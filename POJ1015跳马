#include <iostream>
#include <queue>
#include <vector>
//#include <array>

using namespace std;

int plu[16] = {-2,-1,-2,1,-1,-2,-1,2,1,-2,1,2,2,1,2,-1};
struct play{
        int x,y,step;
    };
queue<play> que;
bool check(int n,int x,int y,vector<vector<int> > ivvec){
    if(x<0||x>n-1||y<0||y>n-1||ivvec[x][y]==0){
        return false;
    }
    else {
        return true;
    }
}
int chess(int n,int sx, int sy,int ex,int ey){
    vector<int> ivec(n,1);
    vector<vector<int> > ivvec(n,ivec);

    play now;

    now.x = sx;
    now.y = sy;
    now.step = 0;
    ivvec[sx][sy]=0;
    que.push(now);
    while(!que.empty()){
        play a = que.front();
        que.pop();
        if(a.x==ex&&a.y==ey){
            return a.step;
        }

        for(int i = 0;i<8;i++){
            if(check(n,a.x+plu[2*i],a.y+plu[2*i+1],ivvec)){
                play b;
                b.x=a.x+plu[2*i];
                b.y=a.y+plu[2*i+1];
                b.step=a.step+1;
                que.push(b);
                ivvec[b.x][b.y]=0;
            }

        }
    }
    return -1;

}

int main(){
    int k;
    cin>>k;
    while(k--){
        int n,sx,sy,ex,ey;
        cin>>n>>sx>>sy>>ex>>ey;
        int sum=chess(n,sx,sy,ex,ey);
        cout<<sum<<"\n";
    }
}

*****************************
#include <iostream>
#include <cstring>
#include <queue>

using namespace std;
int size_qipan,ini_x,ini_y,targ_x,targ_y;
struct qi{
    int x;
    int y;
    int step;
};
queue<qi> que;
queue<qi> que2;
queue<qi> que3;
int qipan[305][305];
int xiaqi[305][305];
int plu[16] = {-2,1,-2,-1,-1,2,-1,-2,1,-2,1,2,2,-1,2,1};
bool check(int x,int y){
    if(x<0||x>size_qipan-1||y<0||y>size_qipan-1||qipan[x][y]==0||xiaqi[x][y]==0){
        return false;
    }
    else{
        return true;
    }
};

void chess(){

    memset(qipan,1,sizeof qipan);
    memset(xiaqi,1,sizeof xiaqi);
    cin>>size_qipan>>ini_x>>ini_y>>targ_x>>targ_y;
    if(ini_x==targ_x&&ini_y==targ_y){
        cout<<"0\n";
        return;
    }
    qi qi0;
    qi0.x = ini_x;
    qi0.y = ini_y;
    qi0.step = 0;
    xiaqi[qi0.x][qi0.y] = 0;
    que2.push(qi0);
    while(!que2.empty()){
        que=que2;
        while(!que.empty()){
            qi qi_now = que.front();
            que.pop();
            qi qi_next;
            for(int i = 0;i<8;i++){
                qi_next.x = qi_now.x+plu[2*i];
                qi_next.y = qi_now.y+plu[2*i+1];
                qi_next.step = qi_now.step+1;
                if(qi_next.x==targ_x&&qi_next.y==targ_y){
                    cout<<qi_next.step<<"\n";
                    return;
                }
                if(check(qi_next.x,qi_next.y)){
                    que3.push(qi_next);
                    xiaqi[qi_next.x][qi_next.y]=0;
                }
            }
        }
        que2=que3;
        while(!que3.empty()){
            que3.pop();
        }
    }
}




int main()
{
    int k;
    cin>>k;
    while(k--){
        chess();
    }
    return 0;
}
*****************************************弄了一下午了。。
*****************************************就是不对。。。
#include <cstring>
#include <iostream>
#include <queue>

using namespace std;
int bushu[305][305];
int plu[16] = {-2,1,-2,-1,-1,2,-1,-2,1,-2,1,2,2,-1,2,1};
int size_qipan,ini_x,ini_y,targ_x,targ_y;
struct qi{
    int x;
    int y;
};
bool check(int x,int y){
    if(x<0||x>size_qipan-1||y<0||y>size_qipan-1){
        return false;
    }
    else{
        return true;
    }
};
queue<qi> que,que2;
void chess(){
    memset(bushu,-1,sizeof bushu);
    que=que2;
    cin>>size_qipan>>ini_x>>ini_y>>targ_x>>targ_y;
    if(ini_x==targ_x&&ini_y==targ_y){
        cout<<"0\n";
        return;
    }
    qi qi0;
    qi0.x = ini_x;
    qi0.y = ini_y;
    bushu[qi0.x][qi0.y] = 0;
    que.push(qi0);
    while(!que.empty()){

            qi qi_now = que.front();
            que.pop();
            for(int i = 0;i<8;i++){
                qi qi_next;
                qi_next.x = qi_now.x+plu[2*i];
                qi_next.y = qi_now.y+plu[2*i+1];

                if(qi_next.x==targ_x&&qi_next.y==targ_y){
                    cout<<bushu[qi_now.x][qi_now.y]+1<<"\n";
                    return;
                }
                if(check(qi_next.x,qi_next.y)&&bushu[qi_next.x][qi_next.y]==-1){
                    que.push(qi_next);
                    bushu[qi_next.x][qi_next.y] = bushu[qi_now.x][qi_now.y]+1;
                }
            }

        }
    }

int main(){
    int k;
    cin>>k;
    while(k--){
        chess();
    }
    return 0;
}
**********还是用数组弄好了。。ac
